kubectl create ns logging
#create folder logconfig 
helm show values grafana/loki-stack > loki-values.yaml
#modify the yaml with loki,promtail and grafana
loki:
  enabled: true
  isDefault: true
  url: http://{{(include "loki.serviceName" .)}}:{{ .Values.loki.service.port }}
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  datasource:
    jsonData: "{}"
    uid: ""


promtail:
  enabled: true
  config:
    logLevel: info
    serverPort: 3101
    clients:
      - url: http://{{ .Release.Name }}:3100/loki/api/v1/push


grafana:
  enabled: true
  sidecar:
    datasources:
      label: ""
      labelValue: ""
      enabled: true
      maxLines: 1000
  image:
    tag: latest

helm upgrade --install loki -f loki-values.yaml -n logging --create-namespace grafana/loki-stack
kubectl get pods -n logging
kubectl port-forward service/loki-grafana 3100:80
#open bash script run the following
kubectl get secret loki-grafana -n logging -o jsonpath="{.data.admin-password}" | base64 --decode

----optional-----------
create ns loki
helm search repo loki
helm upgrade --install loki grafana/loki -n loki --set deploymentMode=SingleBinary --set read.replicas=0 --set write.replicas=0 --set backend.replicas=0 --set loki.auth_enabled=false --set loki.commonConfig.replication_factor=1 --set loki.storage.type=filesystem --set loki.storage.filesystem.chunks_directory=/var/loki/chunks --set loki.storage.filesystem.rules_directory=/var/loki/rules --set singleBinary.replicas=1 --set singleBinary.image.repository=grafana/loki --set singleBinary.image.tag=3.5.3  --set test.enabled=false --set lokiCanary.enabled=false --set loki.useTestSchema=true
#incase of image error to find
kubectl -n loki get pod loki-0 -o jsonpath='{.spec.containers[*].image}{"\n"}{.spec.initContainers[*].image}{"\n"}'
#to find loki version
helm show chart grafana/loki | grep appVersion
-----------------------------------
